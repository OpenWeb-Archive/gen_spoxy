defmodule GenSpoxy.Periodic.TasksExecutor.Tests do
  use ExUnit.Case, async: false

  import Macros.Tests

  alias GenSpoxy.Stores.Ets

  defquery(
    Periodic.SampleQuery,
    do_req: fn req ->
      :timer.sleep(300)
      {:ok, "response for #{inspect(req)}"}
    end
  )

  defmodule Periodic.SampleCache do
    use GenSpoxy.Cache,
      store_module: Ets,
      query_module: Periodic.SampleQuery,
      config: [total_partitions: 1, periodic_sampling_interval: 100]
  end

  # `SampleCache.TasksExecutor` is auto-generated by `Periodic.SampleCache`
  # when calling `use GenSpoxy.Cache
  alias __MODULE__.Periodic.SampleCache.TasksExecutor

  setup_all do
    Periodic.SampleQuery.Supervisor.start_link()
    :ok
  end

  setup do
    Ets.reset_all!()
    :ok
  end

  test "executes the enqueued taks periodically" do
    req = ["periodic-test-1", "newest"]
    req_key = "req-1"
    opts = [table_name: "table-periodic-1", ttl_ms: 1000]

    partition = TasksExecutor.calc_req_partition(req_key)
    server_name = TasksExecutor.partition_server(partition)

    {:ok, _pid} = TasksExecutor.start_link(name: server_name)

    Enum.each(1..10, fn _ ->
      TasksExecutor.enqueue_task(req_key, [req, opts])
    end)

    :timer.sleep(250)
    Periodic.SampleQuery.inspect_all_partitions()
    %{total_listeners: 1, total_passive: 0} = Periodic.SampleQuery.inspect_all_partitions()

    :timer.sleep(300)
    %{total_listeners: 0, total_passive: 0} = Periodic.SampleQuery.inspect_all_partitions()
  end
end
